<?php

/**
 * Implements hook_permission().
 */
function autobread_permission() {
  return array(
    'administer autobread' =>  array(
      'title' => t('Administer the autobread module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function autobread_menu() {
  $items['admin/config/user-interface/autobread'] = array(
    'title' => 'Autobread',
    'description' => 'Configure autobread settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autobread_settings_form'),
    'access arguments' => array('administer autobread'),
    'file' => 'autobread.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function autobread_page_delivery_callback_alter() {
   drupal_set_breadcrumb( array() ); //clear

   if (_autobread_is_excluded_path()) {
    return FALSE;
   }

   $arg0 = arg(0);
   $arg1 = arg(1);
   $arg2 = arg(2);

   //Node
   if ($arg0 == 'node' && is_numeric($arg1) ) {
      if ( $node = node_load($arg1) ) {
        $res = autobread_get_entity_taxonomy('node', $node, $node->type);
        $page_type = array();
        if ( drupal_valid_path($node->type) ) $page_type[] = l(node_type_get_name($node), $node->type);

        if ( count($res) && count($page_type) ) {
          autobread_set_taxonomy_bread($res, $page_type);
          return;
        } 
      }
   }

   //Taxonomy_term
   if ($arg0 == 'taxonomy' && $arg1 == 'term' && is_numeric($arg2)) {
      if ( $tax = taxonomy_term_load($arg2) ) {
           $parents = taxonomy_get_parents_all($arg2);
           $init_crumb = array();

           //tvi support  
           if (module_exists('tvi')) {
                list($view, $display, $term, $settings) = tvi_get_view_info($arg2);
                $title = autobread_get_view_title($view, $display);
                if ($title) {
                   $init_crumb[] = l($title, $view->get_url(0));
                }
           }

           autobread_set_taxonomy_bread($parents, $init_crumb);
           return;
      }
   }

   //Alias
   $current_path = drupal_get_path_alias(current_path());
   $parts = explode( "/", $current_path );
   $bread = array();
   foreach ($parts as $part) {
     array_pop($parts);
     $path = implode("/",$parts);
     if ( drupal_valid_path($path) ) {
       $title = autobread_get_title($path);
       if ($title) {
         $bread[] = l($title,$path);
       }
     }   
   }
 
   if (count($bread)) {
     autobread_set_bread($bread);
     return;
   }

   //Default
   $title = drupal_get_title();
   if ($arg0 == 'node' && is_numeric($arg1) ||
       $arg0 == 'taxonomy' && $arg1 == 'term' && is_numeric($arg2)
     ) {
     $default = $title;
   }
   else {
     $default = l($title, $current_path, array('html'=>TRUE));
   }
   autobread_set_bread( array( $default ) );

}

/**
 *  Get parents for taxonomy term reference fields
 */
function autobread_get_entity_taxonomy( $entity_type, $entity, $entity_name ) {                                      
  $type_info = field_info_instances($entity_type, $entity_name);        

  foreach ( $type_info as $item ) {
    if ( in_array( $item['widget']['type'], array('options_select','options_buttons')) ) {   
         $field_name = $item['field_name'];
         $field_info = field_info_field( $field_name ); 
         if ( $field_info['type'] == 'taxonomy_term_reference' ) {      
              $field = field_get_items($entity_type, $entity, $field_name);  
              if ( !empty($field) && count($field) ) {
                 $res = array();
                 foreach ($field as $val)  {
                   $res1 = taxonomy_get_parents_all($val['tid']);
                   //$res = array_merge($res,$res1);
                   $res[] = $res1;
                 };
                 return $res;
              }
         }
    }
  }

  return array();
}

/**
 *  Set breadcrumbs
 */
function autobread_set_bread ( $arr ) {
   $bread = array();

   if ( variable_get('autobread_set_frontpage', TRUE) ) {
     $bread[] = l(t('Home'), '<front>');
   }

   $arr = array_reverse($arr);
   $bread = array_merge($bread, $arr);
   drupal_set_breadcrumb( $bread );
}

/**
 *  Set taxonomy breadcrumbs
 */
function autobread_set_taxonomy_bread($tax, $init_crumb = array()) {
   $bread = array();

   if ( variable_get('autobread_set_frontpage', TRUE) ) {
     $bread[] = l(t('Home'), '<front>');
   }

   //Taxonomy
   $bread_tax = array();
   if ( count($tax) > 0 ) {
     $bread_tax = _autobread_make_simple_array(array_reverse($tax));

     //Multiple
     $bread_tax1 = array();
     foreach ($bread_tax as $tax) {
       if (is_array($tax)) {
         foreach ($tax as $tax2) {
           $bread_tax1[] = $tax2;
         }
       }
     }
     if (count($bread_tax1)) {
       $bread_tax = array( implode("," , array_reverse($bread_tax1)) );
     }

   }

   if ( variable_get('autobread_set_title', FALSE) ) {
     $title = drupal_get_title();
     $bread_tax[] = $title;
   }

   $bread = array_merge($bread, $init_crumb, $bread_tax);
   drupal_set_breadcrumb( $bread );
}

/**
 *  Make array for breadcrumbs
 */
function _autobread_make_simple_array( $arr ) {  
   $res = array();
   foreach ($arr as $item) {
     if (is_array($item)) {
       $res2 = array();
       foreach ($item as $item2) {
         $res2[] = l( $item2->name, "taxonomy/term/".$item2->tid );
       }
       $res[] = $res2;
     }
     else {
       $res[] = l( $item->name, "taxonomy/term/".$item->tid );
     }
   }
   return $res; 
}

/**
 * Check if the breadcrumb for the current path can be overwritten.
 *
 * @return bool
 *   Whether or not the given path is an excluded one.
 */
function _autobread_is_excluded_path() {
  module_load_include('inc', 'pathauto', 'pathauto');

  $paths = explode("\n", trim(variable_get('autobread_excluded_paths', "[front]\nsearch/*")));
  $current_path = current_path();
  $current_alias = drupal_get_path_alias($current_path);

  foreach ($paths as $path) {
    $path = trim($path);

    if ($path == '[front]') {
       return drupal_is_front_page(); //frontpage
    }

    $path = _pathauto_clean_separators($path, '/');
    $path = str_replace('/', '\/', preg_quote(trim($path)));
    $path = str_replace('\*', '.*?', $path);

    if (preg_match("/^" . $path . "$/", $current_path) || preg_match("/^" . $path . "$/", $current_alias)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 *  Get title from path
 */
function autobread_get_title($path) {
  $item = menu_get_item($path); 
  if (!empty($item['title'])) return $item['title'];

  if ($item['page_callback']=='views_page') {
    $view_name = $item['page_arguments'][0];
    $display = $item['page_arguments'][1];
    $view = views_get_view($view_name);
    $title = autobread_get_view_title($view, $display);
    if (!empty($title)) return $title;
  }

  return FALSE;
}

/**
 *  Get title from view
 */
function autobread_get_view_title($view, $display) {
    $title = FALSE;
    if (is_object($view) && !empty($view->display[$display])) {
      if (isset($view->display[$display]->display_options['title'])) {
        $title = $view->display[$display]->display_options['title'];
      }
      else {
        if (empty($title)) $title = $view->display[$display]->display_title;
        if (!empty($title)) return $title;
      }
    }
    return title;
}

/**
 * Implements hook_theme_registry_alter().
 */
function autobread_theme_registry_alter(&$theme_registry) {
  $theme_registry['breadcrumb']['theme path'] = drupal_get_path('module', 'autobread');
  $theme_registry['breadcrumb']['function'] = 'autobread_breadcrumb';
}

/**
 * Override default theme_breadcrumb().
 *
 * @param array $variables
 *   Contains array with breadcrumbs.
 *
 * @return bool|string
 *   Rendered breadcrumbs or FALSE for no breadcrumbs.
 */
function autobread_breadcrumb($variables) {
  $breadcrumb = $variables['breadcrumb'];

  if (!empty($breadcrumb)) {
    // Provide a navigational heading to give context for breadcrumb links to
    // screen-reader users. Make the heading invisible with .element-invisible.
    $output = '<h2 class="element-invisible">' . t('You are here') . '</h2>';

    $delimiter = variable_get('autobread_delimiter', 'Â»');
    $delimiter = '<span class="delimiter">' . $delimiter . '</span>';

    $output .= '<div class="breadcrumb">' . implode($delimiter, $breadcrumb) . '</div>';
    return $output;
  }

  return NULL;
}
